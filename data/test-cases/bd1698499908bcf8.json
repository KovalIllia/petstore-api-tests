{"uid":"bd1698499908bcf8","name":"test_update_pet_with_form","fullName":"tests.test_pet_api#test_update_pet_with_form","historyId":"656720f08623ee68515bcd5371bc9c97","time":{"start":1759995388217,"stop":1759995392197,"duration":3980},"status":"failed","statusMessage":"AssertionError: Expected status code: 200, but got: 404","statusTrace":"pet_api = <src.api.pet_api.PetApi object at 0x7fd3012a1fd0>\npet_payload = {'category': {'id': 979602911, 'name': 'leg'}, 'id': 350981755, 'name': 'Rex', 'photoUrls': ['https://placekitten.com/817/864'], ...}\n\n    @pytest.mark.flaky(reruns=3,reruns_delay=2)\n    def test_update_pet_with_form(pet_api,pet_payload):\n    \n        creating_pet = pet_api.add_pet(pet_payload)\n        time.sleep(3)\n        created_pet = creating_pet.json()\n        pet_id = created_pet[\"id\"]\n    \n    \n        PetWaiter.wait_for_pet(pet_api, pet_id,expected_status=200)\n        response_with_update = pet_api.update_pet_with_form_data(\n            pet_id,\n            name=\"Lopik\",\n            status=\"sold\"\n        )\n    \n>       Checking.check_status_code(response=response_with_update, status_code=200)\n\ntests/test_pet_api.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(response: requests.Response, status_code):\n        \"\"\"\n        Checks the response status code. Can handle a single integer or a list/tuple of integers.\n        \"\"\"\n        if isinstance(status_code, (list, tuple)):\n            assert response.status_code in status_code, \\\n                f\"Expected status codes: {status_code}, but got: {response.status_code}\"\n        else:\n>           assert response.status_code == status_code, \\\n                f\"Expected status code: {status_code}, but got: {response.status_code}\"\nE           AssertionError: Expected status code: 200, but got: 404\n\nutils/checking_methods.py:19: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759995366155,"stop":1759995366156,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_api","time":{"start":1759995366156,"stop":1759995366156,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_client","time":{"start":1759995366156,"stop":1759995366156,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_payload","time":{"start":1759995388217,"stop":1759995388217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code: 200, but got: 404","statusTrace":"pet_api = <src.api.pet_api.PetApi object at 0x7fd3012a1fd0>\npet_payload = {'category': {'id': 979602911, 'name': 'leg'}, 'id': 350981755, 'name': 'Rex', 'photoUrls': ['https://placekitten.com/817/864'], ...}\n\n    @pytest.mark.flaky(reruns=3,reruns_delay=2)\n    def test_update_pet_with_form(pet_api,pet_payload):\n    \n        creating_pet = pet_api.add_pet(pet_payload)\n        time.sleep(3)\n        created_pet = creating_pet.json()\n        pet_id = created_pet[\"id\"]\n    \n    \n        PetWaiter.wait_for_pet(pet_api, pet_id,expected_status=200)\n        response_with_update = pet_api.update_pet_with_form_data(\n            pet_id,\n            name=\"Lopik\",\n            status=\"sold\"\n        )\n    \n>       Checking.check_status_code(response=response_with_update, status_code=200)\n\ntests/test_pet_api.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(response: requests.Response, status_code):\n        \"\"\"\n        Checks the response status code. Can handle a single integer or a list/tuple of integers.\n        \"\"\"\n        if isinstance(status_code, (list, tuple)):\n            assert response.status_code in status_code, \\\n                f\"Expected status codes: {status_code}, but got: {response.status_code}\"\n        else:\n>           assert response.status_code == status_code, \\\n                f\"Expected status code: {status_code}, but got: {response.status_code}\"\nE           AssertionError: Expected status code: 200, but got: 404\n\nutils/checking_methods.py:19: AssertionError","steps":[{"name":"POST /pet","time":{"start":1759995388218,"stop":1759995388506,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET /pet/{petId}","time":{"start":1759995391509,"stop":1759995391797,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"POST /pet/350981755","time":{"start":1759995391798,"stop":1759995392197,"duration":399},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"36ddbce3710657bf","name":"stdout","source":"36ddbce3710657bf.txt","type":"text/plain","size":891}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_pet_api"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"3641-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pet_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"34f8a5be31bb5584","status":"failed","statusDetails":"AssertionError: Expected status code: 200, but got: 404","time":{"start":1759995382273,"stop":1759995386208,"duration":3935}},{"uid":"3378aaf3b36a1e99","status":"failed","statusDetails":"AssertionError: Expected status code: 200, but got: 404","time":{"start":1759995376370,"stop":1759995380263,"duration":3893}},{"uid":"ddb7289d379252","status":"failed","statusDetails":"AssertionError: Expected status code: 200, but got: 404","time":{"start":1759995370317,"stop":1759995374322,"duration":4005}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"bfc9fa5d7f849fd8","status":"passed","time":{"start":1759959734121,"stop":1759959739865,"duration":5744}},{"uid":"6f9e7a2551adb759","status":"passed","time":{"start":1759959593546,"stop":1759959600291,"duration":6745}},{"uid":"b099f5624c80ed4e","reportUrl":"https://KovalIllia.github.io/testProject2/18/#testresult/b099f5624c80ed4e","status":"passed","time":{"start":1759087590911,"stop":1759087596359,"duration":5448}}]},"tags":[]},"source":"bd1698499908bcf8.json","parameterValues":[]}