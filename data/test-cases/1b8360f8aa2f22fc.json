{"uid":"1b8360f8aa2f22fc","name":"test_upload_pet_image","fullName":"tests.test_pet_api#test_upload_pet_image","historyId":"daf0844066cfc69401394e08bb390be5","time":{"start":1760530559272,"stop":1760530568871,"duration":9599},"status":"failed","statusMessage":"AssertionError: Failed to get pet after image upload\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"pet_payload = {'category': {'id': 1242698673, 'name': 'case'}, 'id': 192447243, 'name': 'Rex', 'photoUrls': ['https://dummyimage.com/1004x34'], ...}\nfiles_client = <src.api.files_api.FilesApi object at 0x7f353409d550>\npet_api = <src.api.pet_api.PetApi object at 0x7f35341e7190>\n\n    @pytest.mark.flaky(reruns=3, reruns_delay=2)\n    def test_upload_pet_image(pet_payload, files_client, pet_api):\n        creating_pet = pet_api.add_pet(pet_payload)\n        assert creating_pet.status_code == 200, f\"unsuccessful attempt to add a pet\"\n    \n        created_pet = creating_pet.json()\n        pet_id = created_pet[\"id\"]\n        PetWaiter.wait_for_pet(pet_api, pet_id, expected_status=200)\n    \n        image_path = \"test_dog.png\"\n        file_path = FileFactory.pet_image(image_path)\n    \n        response = files_client.upload_pet_image(pet_id=pet_id, file_path=file_path)\n        assert response.status_code == 200, f\"unsuccessful to upload pet image\"\n        upload_data = response.json()\n        assert (\n                \"message\" in upload_data\n        ), f\"No 'message' in form update response: {upload_data}\"\n        for key in [\"code\", \"type\", \"message\"]:\n            assert key in upload_data, f\"Missing {key} in response: {upload_data}\"\n    \n        get_response = pet_api.find_pet_by_id(pet_id)\n>       assert get_response.status_code == 200, f\"Failed to get pet after image upload\"\nE       AssertionError: Failed to get pet after image upload\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntests/test_pet_api.py:186: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760530535184,"stop":1760530535185,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_api","time":{"start":1760530535185,"stop":1760530535185,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_client","time":{"start":1760530535185,"stop":1760530535185,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"logger","time":{"start":1760530556927,"stop":1760530556927,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"files_client","time":{"start":1760530556927,"stop":1760530556927,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_payload","time":{"start":1760530559271,"stop":1760530559271,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Failed to get pet after image upload\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"pet_payload = {'category': {'id': 1242698673, 'name': 'case'}, 'id': 192447243, 'name': 'Rex', 'photoUrls': ['https://dummyimage.com/1004x34'], ...}\nfiles_client = <src.api.files_api.FilesApi object at 0x7f353409d550>\npet_api = <src.api.pet_api.PetApi object at 0x7f35341e7190>\n\n    @pytest.mark.flaky(reruns=3, reruns_delay=2)\n    def test_upload_pet_image(pet_payload, files_client, pet_api):\n        creating_pet = pet_api.add_pet(pet_payload)\n        assert creating_pet.status_code == 200, f\"unsuccessful attempt to add a pet\"\n    \n        created_pet = creating_pet.json()\n        pet_id = created_pet[\"id\"]\n        PetWaiter.wait_for_pet(pet_api, pet_id, expected_status=200)\n    \n        image_path = \"test_dog.png\"\n        file_path = FileFactory.pet_image(image_path)\n    \n        response = files_client.upload_pet_image(pet_id=pet_id, file_path=file_path)\n        assert response.status_code == 200, f\"unsuccessful to upload pet image\"\n        upload_data = response.json()\n        assert (\n                \"message\" in upload_data\n        ), f\"No 'message' in form update response: {upload_data}\"\n        for key in [\"code\", \"type\", \"message\"]:\n            assert key in upload_data, f\"Missing {key} in response: {upload_data}\"\n    \n        get_response = pet_api.find_pet_by_id(pet_id)\n>       assert get_response.status_code == 200, f\"Failed to get pet after image upload\"\nE       AssertionError: Failed to get pet after image upload\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntests/test_pet_api.py:186: AssertionError","steps":[{"name":"POST /pet","time":{"start":1760530559272,"stop":1760530559313,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET /pet/{petId}","time":{"start":1760530559313,"stop":1760530559443,"duration":130},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET /pet/{petId}","time":{"start":1760530562446,"stop":1760530562567,"duration":121},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET /pet/{petId}","time":{"start":1760530565571,"stop":1760530565611,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET /pet/{petId}","time":{"start":1760530568615,"stop":1760530568781,"duration":166},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"GET /pet/{petId}","time":{"start":1760530568824,"stop":1760530568871,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"250399c091803511","name":"stdout","source":"250399c091803511.txt","type":"text/plain","size":840}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_pet_api"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"3703-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_pet_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"1b8360f8aa2f22fc.json","parameterValues":[]}